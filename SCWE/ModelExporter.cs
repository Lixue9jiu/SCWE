using System;
using System.IO;
using System.Text;

namespace SCWE
{
    public static class ModelExporter
    {
        public const Options DefaultOptions = Options.UseBinary | Options.ExportUV | Options.ExportColor;
        const string Comment = "generated by SCWE - made by lixue_jiu";

        [Flags]
        public enum Options : byte
        {
            None = 0,
            UseBinary = 1,
            ExportUV = 1 << 1,
            ExportColor = 1 << 2
        }

        public static void ExportPly(Mesh mesh, string path, Options options = DefaultOptions)
        {
            using (Stream s = File.OpenWrite(path))
            {
                ExportPly(mesh, s, options);
            }
        }

        // exporting a mesh to a ply format
        // will only work for meshes made of triangles
        public static void ExportPly(Mesh mesh, Stream stream, Options options = DefaultOptions)
        {
            if (mesh.triangles.Length % 3 != 0)
            {
                throw new NotImplementedException("only support meshes made of triangles");
            }
            bool useBinary = (options & Options.UseBinary) == Options.UseBinary;
            bool exportUV = (options & Options.ExportUV) == Options.ExportUV;
            bool exportColor = (options & Options.ExportColor) == Options.ExportColor;

            StreamWriter writer = new StreamWriter(stream, Encoding.ASCII);

            // begin to write header
            writer.WriteLine("ply");
            writer.WriteLine(useBinary ? "format binary_little_endian 1.0" : "format ascii 1.0");
            writer.Write("comment ");
            writer.WriteLine(Comment);
            writer.WriteLine("element vertex " + mesh.vertices.Length);
            writer.WriteLine("property float32 x");
            writer.WriteLine("property float32 y");
            writer.WriteLine("property float32 z");
            if (exportUV)
            {
                writer.WriteLine("property float32 s");
                writer.WriteLine("property float32 t");
            }
            if (exportColor)
            {
                writer.WriteLine("property uchar red");
                writer.WriteLine("property uchar green");
                writer.WriteLine("property uchar blue");
            }
            writer.WriteLine("element face " + (mesh.triangles.Length / 3));
            writer.WriteLine("property list uchar uint vertex_index");
            writer.WriteLine("end_header");

            if (useBinary)
            {
                writer.Flush();

                // writing binary data - little endian
                // begin to write vertices
                BinaryWriter bWriter = new BinaryWriter(stream);
                for (int i = 0; i < mesh.vertices.Length; i++)
                {
                    var v = mesh.vertices[i];
                    bWriter.Write(v.x);
                    bWriter.Write(v.y);
                    bWriter.Write(v.z);
                    if (exportUV)
                    {
                        var uv = mesh.uv[i];
                        bWriter.Write(uv.x);
                        bWriter.Write(uv.y);
                    }
                    if (exportColor)
                    {
                        var col = mesh.colors[i];
                        bWriter.Write(col.r);
                        bWriter.Write(col.g);
                        bWriter.Write(col.b);
                    }
                }

                //begin to write triangles
                var triangles = mesh.triangles;
                for (int i = 0; i < mesh.triangles.Length; i += 3)
                {
                    bWriter.Write((byte)3);
                    bWriter.Write(triangles[i]);
                    bWriter.Write(triangles[i + 1]);
                    bWriter.Write(triangles[i + 2]);
                }
            }
            else
            {
                //begin to write vertices
                for (int i = 0; i < mesh.vertices.Length; i++)
                {
                    var v = mesh.vertices[i];
                    writer.Write("{0} {1} {2}", v.x, v.y, v.z);
                    if (exportUV)
                    {
                        var uv = mesh.uv[i];
                        writer.Write(" {0} {1}", uv.x, uv.y);
                    }
                    if (exportColor)
                    {
                        var col = mesh.colors[i];
                        writer.Write(" {0} {1} {2}", col.r, col.g, col.b);
                    }
                    writer.WriteLine();
                }

                //begin to write triangles
                for (int i = 0; i < mesh.triangles.Length; i += 3)
                {
                    writer.WriteLine("3 {0} {1} {2}", mesh.triangles[i], mesh.triangles[i + 1], mesh.triangles[i + 2]);
                }
                writer.Flush();
            }
        }
    }
}
